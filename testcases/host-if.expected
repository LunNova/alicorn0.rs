{ { "let", "host-if-2", "=", "unwrap", { "intrinsic", { elements = { "return U.notail(evaluator.gen_base_operator(\"#host-if-2\", function(result, c2, a1, subject, consequent, alternate)\n\treturn U.notail(terms.typed_term.host_if(subject, consequent, alternate))\nend, \"result\", \"c2\", \"a1\", \"subject\", \"consequent\", \"alternate\"))" }, kind = "string" }, ":", { "wrapped", { "forall", { { "result", ":", "host-type" }, { "c2", ":", "host-type" }, { "a1", ":", "host-type" }, { "subject", ":", "host-bool" }, { "consequent", ":", { "host-if", "subject", "result", "c2" } }, { "alternate", ":", { "host-if", "subject", "a1", "result" } } }, "->", { "r", ":", "result" } } } } }, { "let", "host-true", "=", "intrinsic", { elements = { "return true" }, kind = "string" }, ":", "host-bool" }, { "let", "host-false", "=", "intrinsic", { elements = { "return false" }, kind = "string" }, ":", "host-bool" }, { "let", "host-if-test", "=", "lambda", { { "b", ":", "host-bool" }, { "x", ":", { "host-if", "b", "host-string", "host-unit" } } }, { "let", "default", "=", "intrinsic", { elements = { "return 'default'" }, kind = "string" }, ":", { "host-if", "b", "host-string", "host-string" } }, { "let", "foo", "=", { "host-if-2", "host-string", "host-unit", "host-string", "b", "x", "default" } }, { "the", "host-string", "foo" } }, { "host-if-test", "host-true", { elements = { "foobar" }, kind = "string" } }, { "host-if-test", "host-false", "host-nil" } }
