{ "#\t---@alias URect userdata\nlet URect = new-host-type(new-host-unique-id(\"URect\"))\n\n#\t---@alias Component userdata\nlet Component = new-host-type(new-host-unique-id(\"Component\"))\n\n#\t---@alias EventHandler userdata\nlet EventHandler = new-host-type(new-host-unique-id(\"EventHandler\"))\n\n####\n\t---@param left number\n\t---@param top number\n\t---@param right number\n\t---@param bottom number\n\t---@param rel_left number\n\t---@param rel_top number\n\t---@param rel_right number\n\t---@param rel_bottom number\n\t---@return URect\n\tfunction create_urect(left, top, right, bottom, rel_left, rel_top, rel_right, rel_bottom)\n\tend\nlet create-urect-bind =\n\tintrinsic\n\t\t\"return create_urect\"\n\t\t:\n\t\thost-func-type\n\t\t\t(\n\t\t\t\tleft : host-number,\n\t\t\t\ttop : host-number,\n\t\t\t\tright : host-number,\n\t\t\t\tbottom : host-number,\n\t\t\t\trel_left : host-number,\n\t\t\t\trel_top : host-number,\n\t\t\t\trel_right : host-number,\n\t\t\t\trel_bottom : host-number\n\t\t\t)\n\t\t\t->\n\t\t\t((res : URect))\nlet create-urect =\n\tlambda\n\t\t(\n\t\t\tleft : host-number,\n\t\t\ttop : host-number,\n\t\t\tright : host-number,\n\t\t\tbottom : host-number,\n\t\t\trel_left : host-number,\n\t\t\trel_top : host-number,\n\t\t\trel_right : host-number,\n\t\t\trel_bottom : host-number\n\t\t)\n\t\tlet (res) = create-urect-bind(left, top, right, bottom, rel_left, rel_top, rel_right, rel_bottom)\n\t\tres\n####\n\t---@param name string\n\t---@param child Component\n\t---@return Component\n\tfunction create_window(name, child) end\nlet create-window-bind =\n\tintrinsic\n\t\t\"return create_window\"\n\t\t:\n\t\thost-func-type (name : string, child : Component) -> (res : Component)\nlet create-window =\n\tlambda (name : string, child : Component)\n\t\tlet (res) = create-window-bind(name, child)\n\t\tres\n####\n\t---@param area URect\n\t---@param ... Component\n\t---@return Component\n\tfunction create_region(area, ...) end\nlet create-region-bind =\n\tintrinsic\n\t\t\"return function(area, components) return create_region(area, table.unpack(components)) end\"\n\t\t:\n\t\thost-func-type (area : URect, components : host-array-type(Component)) -> (res : Component)\n\nlet create-region =\n\tlambda (area : URect, components : host-array-type(Component))\n\t\tlet (res) = create-region-bind(area, components)\n\t\tres\n\n####\n\t---@param area URect\n\t---@param text string\n\t---@param onclick EventHandler\n\t---@param background Component\n\t---@return Component\n\tfunction create_button(area, text, onclick, background) end\nlet create-button-bind =\n\tintrinsic\n\t\t\"return create_button\"\n\t\t:\n\t\thost-func-type (area : URect, text : string, onclick : EventHandler, background : Component) -> (res : Component)\nlet create-button =\n\tlambda (area : URect, text : string, onclick : EventHandler, background : Component)\n\t\tlet (res) = create-button-bind(area, text, onclick, background)\n\t\tres\n####\n\t---@param area URect\n\t---@param text string\n\t---@return Component\n\tfunction create_label(area, text) end\nlet create-label-bind =\n\tintrinsic \"return create_label\" : host-func-type (area : URect, text : string) -> (res : Component)\n\nlet create-label =\n\tlambda (area : URect, text : string)\n\t\tlet (res) = create-label-bind(area, text)\n\t\tres\n\n####\n\t---Colors here are 32-bit RGBA integers (for now): 0xFF00FFFF\n\t---@param area URect\n\t---@param color integer\n\t---@param radius number\n\t---@param border number\n\t---@param bordercolor integer\n\t---@return Component\n\tfunction create_round_rect(area, color, radius, border, bordercolor) end\nlet create-round-rect-bind =\n\tintrinsic\n\t\t\"return create_round_rect\"\n\t\t:\n\t\thost-func-type (area : URect, color : host-number, radius : host-number, border : host-number, bordercolor : host-number) -> (res : Component)\nlet create-round-rect =\n\tlambda (area : URect, color : host-number, radius : host-number, border : host-number, bordercolor : host-number)\n\t\tlet (res) = create-round-rect-bind(area, color, radius, border, bordercolor)\n\t\tres\n\n####\n\t---@param f fun(userdata, userdata, any): typed\n\t---@return EventHandler\n\tfunction create_event_handler(f) end\nlet create-event-handler =\n\tlambda_implicit (AppData : host-type)\n\t\tlet cb-type = host-func-type (userdata : UserData, userdata : UserData, appdata : AppData) -> (res : EventHandler)\n\t\tlet inner =\n\t\t\tintrinsic\n\t\t\t\t\"return function(f) return create_event_handler(f) end\"\n\t\t\t\t:\n\t\t\t\thost-func-type (f : cb-type) -> (res : EventHandler)\n\t\tlambda (f : host-func-type-to-func-type(cb-type, host-nil))\n\t\t\tlet (cb) = func-to-host-func(cb-type, host-nil, wrap(f))\n\t\t\tlet (res) = inner(f)\n\t\t\tres", { "let", "HTTPServer", "=", { "new-host-type", { "new-host-unique-id", { elements = { "HTTPServer" }, kind = "string" } } } }, { "let", "HTTPRequest", "=", { "new-host-type", { "new-host-unique-id", { elements = { "HTTPRequest" }, kind = "string" } } } }, { "let", "HTTPResponse", "=", { "new-host-type", { "new-host-unique-id", { elements = { "HTTPResponse" }, kind = "string" } } } }, { "let", "HTTPHandler", "=", "host-prog-type", { { "req", ":", "HTTPRequest" }, { "res", ":", "HTTPResponse" } }, "->", { } }, { "let", "string", "=", "host-string" }, "let create-http-server =\nlambda-prog (callback : host-funcprog-type-to-funcprog-type(HTTPHandler, host-nil))\n\tlet inner =\n\t\tintrinsic\n\t\t\t\"\"\"\"\n\t\t\t\tlocal http = require \"http\"\n\t\t\t\tlocal function createServer(handler)\n\t\t\t\t\tlocal function wrapper(req, res)\n\t\t\t\t\t\tevaluator.register_effect_handler(terms.lua_prog, evaluator.host_effect_handler)\n\t\t\t\t\t\treturn handler(req, res)\n\t\t\t\t\tend\n\t\t\t\t\treturn http.createServer(wrapper)\n\t\t\t\tend\n\t\t\t\treturn createServer\n\t\t\t:\n\t\t\thost-prog-type ((handler : HTTPHandler)) -> ((res : HTTPServer))\n\tlet host-cb = funcprog-to-host-funcprog(HTTPHandler, host-nil, callback)\n\tlet (res) = inner(host-cb)\n\tres", "let http-server-listen =\nintrinsic\n\t\"return function(server, host, port) server:listen(port, host) end\"\n\t:\n\thost-prog-type (server : HTTPServer, host : string, port : host-number) -> ()", "let response-set-header =\nintrinsic\n\t\"return function(res, name, val) res:setHeader(name, val) end\"\n\t:\n\thost-prog-type (res : HTTPResponse, name : string, value : string) -> ()", "let response-send-body =\nintrinsic\n\t\"return function(res, body) res:finish(body) end\"\n\t:\n\thost-prog-type (res : HTTPResponse, body : string) -> ()", { "let", "strlen", "=", { "do", { "let", "inner", "=", "intrinsic", { elements = { "return function(str) return #str end" }, kind = "string" }, ":", { "host-func-type", { { "str", ":", "string" } }, "->", { { "len", ":", "host-number" } } } }, { "lambda", { { "str", ":", "string" } }, { "let", { "res" }, "=", { "inner", "str" } }, "res" } } }, { "let", "num-to-str", "=", { "do", { "let", "inner", "=", "intrinsic", { elements = { "return tostring" }, kind = "string" }, ":", { "host-func-type", { { "num", ":", "host-number" } }, "->", { { "str", ":", "string" } } } }, { "lambda", { { "num", ":", "host-number" } }, { "let", { "res" }, "=", { "inner", "num" } }, "res" } } }, { "let", "print", "=", { "do", { "let", "inner", "=", "intrinsic", { elements = { "return print" }, kind = "string" }, ":", { "host-prog-type", { { "str", ":", "string" } }, "->", { } } }, { "lambda-prog", { { "str", ":", "string" } }, { "let", { }, "=", { "inner", "str" } } } } }, { "let", "runloop", "=", { "intrinsic", { elements = { "return require 'uv'.run" }, kind = "string" }, ":", { "host-prog-type", { }, "->", { } } } }, "let my-request-handler = lambda-prog (req : HTTPRequest, res : HTTPResponse)\nprint \"got a request!\"\nlet body = \"Hello World!\\n\"\nresponse-set-header res \"Content-Type\" \"text/plain\"\nresponse-set-header res \"Content-Length\" num-to-str(strlen(body))\nresponse-send-body res body\ntuple-of()", "let main = lambda-prog ()\nlet server = create-http-server(my-request-handler)\nhttp-server-listen server \"0.0.0.0\" 8080\nprint \"server started on localhost:8080\"\nrunloop()", "main()" }
